---
layout: post
title:  "[기타]git 몰랐던 내용 정리"
date:   2022-02-02 21:20:00 +0900
categories: study
---

Git 관련해서 내가 몰랐거나, 헷갈리던 부분들에 대해서 간단히 정리해본다.

- 형상 관리 도구는 애플리케이션의 여러 버전에서 서로 다른 구성(Configuration)을 다루기 위해 설계된 도구를 지칭하며, 많은 형상 관리 도구가 버전 관리 시스템을 기반으로 구축돼서 구성 이력을 추적할 수 있지만, 형상 관리 시스템 자체가 버전 관리 시스템은 아니다.

- 커밋 정렬하기
    - git rebase
        - 말 그대로 베이스를 다시 정렬(재정렬)해주는 명령어
        - 커밋 히스토리를 깔끔하게 관리할 수 있다는 장점이 있음
        - 잘못 사용하면 문제가 발생할 수 있음
            - master branch에서 rebase 하는건 피한다.
        - cf) git merge : 커밋 히스토리가 다 남긴하지만, 상대적으로 훨씬 안전하다.
        - git rebase  --onto master brand search
            - search 브랜치를 brand 브랜치에서 떼어내서 master로 옮기는 명령어
            - search 브랜치를 master 브랜치로 합치려고 하지만, brand 브랜치의 내용이 필요하지는 않은 경우에 유용하다.
            - 물론 충돌이 발생하지 않으려면 search 브랜치의 내용은 독립적이여야 한다
        
- 브랜치를 변경 사항 합치기 전략
    - Straight Merge
        - 하나의 브랜치와 다른 브랜치의 변경 이력 전체를 합치는 방법
    - Squashed Commit
        - 한 브랜치의 이력을 압축하여, 다른 브랜치의 최신 커밋 하나로 만드는 방법
        - git merge 시 --squash 옵션을 준다.
    - Cheery-picking
        - 다른 브랜치에서 하나의 커밋을 가져와서 현재 브랜치에 적용하는 방법
        - 수정된 버그 또는 브랜치들 사이에 공유해야 하는 클래스를 추가하는 경우에 활용
        - git cheery-pick

- 로그
    - -p 옵션 추가 시 리비전이 생성될 때 변경된 내용을 비교해서 보여준다.
    - git log [-n] 을 하면 n개의 커밋만 보여준다.
    - git log [revision]을 하면 해당 리비전으로 시작하는 로그를 볼 수 있다.
    - --since, --before  옵션으로 로그를 필터링해서 볼 수 있다.
        - “2008-10.01” 과 같은 날짜 표현식 또는 “24 hours” 같은 영어 표현식 모두 지정 가능하다.
    - --pretty=format: “%h %s” 짧은 해시와 커밋 로그의 첫 줄을 보여준다.
        - --pretty=oneline을 더 자주 사용하긴 함
    - ^연산자와 ~연산자
        - ^ : 캐럿문자는 -1을 의미한다. 12345e^은 12345e 라는 리비전 바로 이전 리비전을 의미한다.
        - ~N : ~기호와 숫자 연산자는 커밋명에서 N만큼 뺀다. 즉 12345e^ = 12345e~1 과 같다.

- 버전 간 차이점 보기
    - git diff 를 사용하면 되는데, git diff --stat 옵션을 주면, 변경 사항에 대한 통계를 볼 수 있다.
    
- 커밋 수정하기
    - 사소하게 실수했을 때는, git commit --amend 옵션을 사용하자
    - -C 옵션을 추가하면 새로운 메시지 대신 지정한 커밋의 로그 메시지를 이용한다.
    - 커밋 수정하는 것은 마지막으로 실행한 커밋에만 사용하도록 한다.

- 커밋 돌려놓기
    - 가장 간편한 방법은 git revert 명령어를 이용한다.
        - 원본 커밋에서 변경한 모든 내용을 거꾸로 변경해서 저장소에 새로 커밋함으로써 원본 커밋을 돌려놓는다.
    - git revert 사용 시 돌려놓을 대상을 알 수 있도록 커밋명을 지정해야 한다.
        - 이때, 항상 역순으로 (최신 커밋 먼저) 돌려놓도록 한다.
    - 커밋을 돌려놓을 때도 메시지를 상세하게 작성해서, 왜 돌리게 됐는지 다른 동료들이 쉽게 알 수 있도록 하자
    
- 태그로 마일스톤 표시
    - 태그는 저장소의 책갈피라고 보면 된다.
    - SVN과 달리 Git의 태그는 읽기 전용이다.
    - git tag [태그명] 실행 시 현재 작업 트리의 커밋에 태그를 붙이고, 원하는 커밋에 태그를 붙이려면 git tag [커밋명] [태그명] 형식으로 사용하도록 한다.
    - 릴리스 시에는 태그를 활용해서 릴리스 표시 후 해당 브랜치는 삭제해도 된다.
        - 태그가 해당 위치를 표시하고 있기 때문에, 이력 유지를 위해 브랜치를 유지할 필요는 없다.
        
- 저장소 이력 최적화
    - git gc 를 실행하면 이력을 정리할 수 있다.
        - 한 달에 한 번 정도..?
        - 이력 자체가 변경되는 것이 아니고, 이력을 저장하는 방식이 바뀜
        - --aggressive 옵션을 주면, 시간은 좀 더 걸리지만, 좀 더 깊이 최적화한다.
        - 모든 변경을 추적하는 reflog 명령어의 항목을 더 이상 유효하지 않게 만들 수 있으므로 조심하자.


